// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include"Cgs_ClusterCommon.cginc"

RWStructuredBuffer<uint> RWPointLightIndexCounter_Cluster;// : register(u2);
RWStructuredBuffer<uint2> RWPointLightGrid_Cluster;// : register(u4);
RWStructuredBuffer<uint> RWPointLightIndexList_Cluster;// : register(u6);

StructuredBuffer<AABB> ClusterAABBs;// : register(t1);
StructuredBuffer<float4> PointLights;// : register(t8);

uint PointLightCount;
float4x4 _CameraLastViewMatrix;

float4 WorldToView(float4 posWorld)
{
	float4 posView = mul(_CameraLastViewMatrix, posWorld);
	//posView.z *= -1;
	return posView;
}

////////////////////////////////////////////////////////////////////////////////////////////////
#define NUM_THREADS 1024
groupshared uint gs_ClusterIndex1D;
groupshared AABB gs_ClusterAABB;

groupshared uint gs_PointLightCount;
groupshared uint gs_SpotLightCount;
groupshared uint gs_PointLightStartOffset;
groupshared uint gs_SpotLightStartOffset;
groupshared uint gs_PointLightList[1024];
groupshared uint gs_SpotLightList[1024];


#define AppendLight( lightIndex, counter, lightList ) \
    InterlockedAdd( counter, 1, index ); \
    if ( index < 1024 ) \
    { \
        lightList[index] = lightIndex; \
    }

[numthreads(NUM_THREADS, 1, 1)]
void CSMain (ComputeShaderInput IN)
{	
	uint i, index;

	if (IN.GroupIndex == 0)
	{
		gs_PointLightCount = 0;
		gs_SpotLightCount = 0;

		gs_ClusterIndex1D = IN.GroupID.x;
		gs_ClusterAABB = ClusterAABBs[gs_ClusterIndex1D];
	}

	GroupMemoryBarrierWithGroupSync();

	// Intersect point lights against AABB.
	for (i = IN.GroupIndex; i < PointLightCount; i += NUM_THREADS)
	{
		//if ( PointLights[i].Enabled )
		{
			float4 pointLight = PointLights[i];
			float3 pointLightPosView = WorldToView(float4(pointLight.xyz, 1)).xyz;// mul(float4(pointLight.xyz, 1), _CameraLastViewMatrix).xyz;
			Sphere sphere = { pointLightPosView, pointLight.w };

			if (SphereInsideAABB(sphere, gs_ClusterAABB))
			{
				AppendLight(i, gs_PointLightCount, gs_PointLightList);
			}
		}
	}

	GroupMemoryBarrierWithGroupSync();

	// Now update the global light grids with the light lists and light counts.
	if (IN.GroupIndex == 0)
	{
		// Update light grid for point lights.
		InterlockedAdd(RWPointLightIndexCounter_Cluster[0], gs_PointLightCount, gs_PointLightStartOffset);
		RWPointLightGrid_Cluster[gs_ClusterIndex1D] = uint2(gs_PointLightStartOffset, gs_PointLightCount);
	}

	GroupMemoryBarrierWithGroupSync();

	// Now update the global light index lists with the group shared light lists.
	for (i = IN.GroupIndex; i < gs_PointLightCount; i += NUM_THREADS)
	{
		RWPointLightIndexList_Cluster[gs_PointLightStartOffset + i] = gs_PointLightList[i];
	}
}
